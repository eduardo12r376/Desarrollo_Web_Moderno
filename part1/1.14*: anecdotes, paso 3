import { useState } from 'react';


const Header = (props) => {
  console.log(props.course);
  return (
    <>
      <h1>{props.course}</h1>
    </>
  )
}

const Title = ({ title }) => <h1>{title}</h1>


const Part = (props) => {
  console.log(props.parts, props.exercises);
  return (
    <p>{props.parts} {props.exercises}</p>
  )
}
const Content = (props) => {
  console.log('Esto trae el prop:', props);
  return (
    <div>
      { /*<Part parts={props.parts[0].name} exercises={props.parts[0].exercises} />
      <Part parts={props.parts[1].name} exercises={props.parts[1].exercises} />
      <Part parts={props.parts[2].name} exercises={props.parts[2].exercises} /> */}
      <Button handleClick={props.god} text="Good" />
      <Button handleClick={props.neutral} text='Neutral' />
      <Button handleClick={props.bad} text='bad' />
    </div>
  )
}

const Total = (props) => {


  const total = props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises;
  return (
    <>
      <h3>
        Total number of exercises: {total}
      </h3>
    </>
  )
}

const Button = ({ handleClick, text }) => <button onClick={handleClick}>{text}</button>

const StatisticsLine = ({ text, value }) => {

  return (

    <tr>
      <td>{text}</td>
      <td>{value}</td>
    </tr>

  )
};

const Statistics = ({ good, neutral, bad }) => {

  const all = good + neutral + bad;
  const promedio = (good - bad) / all ? (good - bad) / all : 0;
  const commPositivo = (good / all) * 100 ? (good / all) * 100 : 0;
  const commNegativos = (bad / all) * 100 ? (bad / all) * 100 : 0;
  console.log('nan', (good - bad) / all);

  if (all > 0) {
    return (
      <div>
        <h1>Statistics</h1>
        <table>
          <tbody>
            <StatisticsLine text='Good' value={good} />
            <StatisticsLine text='Neutral' value={neutral} />
            <StatisticsLine text='Bad' value={bad} />

            <StatisticsLine text='Todas' value={all} />

            <StatisticsLine text='Promedio' value={promedio} />
            <StatisticsLine text='Comentarios positivos %:' value={commPositivo} />
            <StatisticsLine text='Comentarios negativos %:' value={commNegativos} />
          </tbody>
        </table>
      </div>
    )
  }
  return (
    <div>
      <h1>Statistics</h1>
      <h3>No feedback given</h3>
    </div>
  )
}

const AnecdoteMostVoted = ({anecdotes, votes}) =>{
  console.log('Esto trae anecdotes: ',votes);
  const maxVotes = Math.max(...votes);
  console.log('Maximo de votos: ', maxVotes);
  const indexMaxVotes = votes.indexOf(maxVotes);

  return (
    <div>
      <h1>Anecdotes with most votes</h1>
      <h3>{anecdotes[indexMaxVotes]}</h3>
    </div>
  )
}

const App = () => {

  const [good, setGood] = useState(0);
  const [neutral, setNeutral] = useState(0);
  const [bad, setBad] = useState(0);


  const anecdotes = [
    'If it hurts, do it more often.',
    'Adding manpower to a late software project makes it later!',
    'The first 90 percent of the code accounts for the first 10 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',
    'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',
    'Premature optimization is the root of all evil.',
    'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.',
    'Programming without an extremely heavy use of console.log is same as if a doctor would refuse to use x-rays or blood tests when diagnosing patients.',
    'The only way to go fast, is to go well.'
  ];

  const [votes, setVotes] = useState(new Uint8Array(anecdotes.length));
  
  const [selected, setSelected] = useState(0);

  const handleGood = () => {
    setGood(good + 1);
    console.log('is good', good);
  }
  const henadleNeutral = () => {
    setNeutral(neutral + 1);
  }

  const heandleBad = () => {
    setBad(bad + 1);
  }

  const handleSelectedAnecdote = () => {
    const numberRandom = Math.floor(Math.random() * anecdotes.length);
    setSelected(numberRandom);
  }



  const handelVote = () => {
    const copyVotes = [...votes]
    copyVotes[selected] += 1;
    setVotes(copyVotes);
    console.log('Votes', copyVotes);
  }


  const title = 'Give Feedback.';
  /*const course = {
    name: 'Helf Stack aplicattion developer',

    parts: [
      {
        name: 'Fundamentals os Resct',
        exercises: 10
      },
      {
        name: 'Using props to pass data',
        exercises: 7
      },
      {
        name: 'State of a component',
        exercises: 14
      }
    ]
  };*/
  return (
    <div>
      <Title title={title} />
      <Content god={handleGood} neutral={henadleNeutral} bad={heandleBad} />
      {/* <Content part2={part2.name} exercise2={part2.exercises} />
      <Content part3={part3.name} exercise3={part3.exercises} />
      */}
      {/*<Total parts={course.parts} />*/}
      <Statistics good={good} neutral={neutral} bad={bad} />

      <div>
        <h4>{anecdotes[selected]}</h4>
        <h3>Tiene: {votes[selected]} Votos</h3>
        <Button handleClick={handelVote} text='Vote' />
        <Button handleClick={handleSelectedAnecdote} text='next anecdote' />

      </div>

      <AnecdoteMostVoted votes={votes} anecdotes={anecdotes} />
    </div>
  )

}

export default App
