import { useState, useEffect } from 'react';
import personService from './services/persons.js';
import Course from './Components/Course.jsx';
import './index.css';




const ViewPerson = ({ person, deleteContact }) => {
  return (
    <li>{person.name} : {person.number} <button onClick={() => deleteContact(person.id, person.name)}>Eliminar</button></li>
  )
}

const FilterPersons = ({ filter, handleFilterChange }) => {
  return (
    <div>
      Filtrar por: <input value={filter} onChange={handleFilterChange} />
    </div>

  )
}

const AddContact = ({ addPerson, newname, newnumber, personChange, numberChange }) => {
  return (
    <form onSubmit={addPerson}>
      <div>
        Nombre: <input value={newname} onChange={personChange} />
      </div>
      <br />
      <div>
        Número: <input value={newnumber} onChange={numberChange} />
      </div>
      <div>
        <button type="submit" >Agregar</button>
      </div>
    </form>
  )
}

const Notification = ({message}) =>{
  if(message === null){
    return null;
  }
  return (
    <div className='success'>
      {message}
    </div>
  )
}

const App = () => {

  const [good, setGood] = useState(0);
  const [neutral, setNeutral] = useState(0);
  const [bad, setBad] = useState(0);

  const [persons, setPersons] = useState([]);
  const [newName, setNewName] = useState('');
  const [newNumber, setNewNumber] = useState('');
  const [filter, setFilter] = useState('');
  const [successMessage, setSuccessMessage] = useState(null);


  const hook = () => {
    console.log('effect');
    personService
      .getAll()
      .then(response => {
        setPersons(response.data)
      })
  }

  useEffect(hook, []);

  const addPerson = (event) => {
    console.log('Persona agregada:', newName, ' ', newNumber);
    event.preventDefault();
    const personExist = persons.find(person => person.name === newName);
    console.log('Persona existe:', personExist);
    if (!personExist) {
      const personObject = {
        name: newName,
        number: newNumber
      }
      personService
        .create(personObject)
        .then(response => {
          setPersons(persons.concat(response.data));
          setSuccessMessage(`El contacto ${newName} se ha agregado correctamente.`);
          setTimeout(() =>{
            setSuccessMessage(null);
          },5000)
          setNewName('');
          setNewNumber('');
          
        })


    }
    else
      //window.alert(`Èl nombre: ${newName} ya existe en la lista de contactos.`);
      //window.alert('El nombre: ' + newName + ' ya existe en la lista de contactos.');
      if (window.confirm('EL contacto: ' + newName + ' ya existe en la lista de contactos, ¿Desea Actualizar el numero de este contacto?')) {
        const personEdit = { ...personExist, number: newNumber };
        personService
          .update(personExist.id, personEdit)
          .then(personEdited => {
            setPersons(persons.map(person => person.id !== personExist.id ? person : personEdited.data));
            setNewName('');
            setNewNumber('');
          })
          .catch(error => {
            console.log('Error al actualizar el contacto:', error);
            window.alert(`El contacto: ${newName} ya no existe en la lista de contactos.`);
            setPersons(persons.filter(person => person.id !== personExist.id));
            setNewName('');
            setNewNumber('');
          });

      }

  }


  const handlePersonChange = (event) => {
    console.log(event.target.value);
    setNewName(event.target.value);
  }

  const handleNumberChange = (event) => {
    console.log(event.target.value);
    setNewNumber(event.target.value);
  }

  const handleFilterChange = (event) => {
    console.log(event.target.value);
    setFilter(event.target.value);


  }

  const handleDeleteContact = (id, name) => {
    console.log('Se ha eliminado el contacto con el id: ', name)
    const confirmDelete = window.confirm('¿Estas seguro que deseas eliminar a ' + name + '?');
    if (confirmDelete) {
      console.log('Contacto eliminado con exito', confirmDelete);
      personService
        .deleteContact(id)
        .then(response => {
          setPersons(persons.filter(person => person.id !== id));

        })
    } else {
      console.log('El contacto no se ha eliminado', confirmDelete);
    }
  }
  return (
    <div>

      <h2>Phonebook</h2>
      <Notification message={successMessage}/>
      <FilterPersons filter={filter} handleFilterChange={handleFilterChange} />
      <h2>Agregar un contacto</h2>
      <AddContact
        addPerson={addPerson}
        newname={newName}
        newnumber={newNumber}
        personChange={handlePersonChange}
        numberChange={handleNumberChange} />

      <h2>Contactos</h2>
      <ul>
        {
          (filter
            ? persons.filter(person =>
              person.name.toLowerCase().includes(filter.toLowerCase())
            )
            : persons
          ).map(person =>
            <ViewPerson deleteContact={handleDeleteContact} key={person.id} person={person} />
          )
        }
      </ul>

    </div>
  )

}

export default App
